{"version":3,"sources":["assets/frog_1.png","assets/frog_4.png","assets/frog_2.png","assets/frog_3.png","assets/frog_5.png","assets/frog_0.png","assets/frog_6.png","assets/disp.jpeg","fadeShader.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","FadeShader","uniforms","effectFactor","type","value","dispFactor","texture","undefined","texture2","disp","vertexShader","fragmentShader","Box","props","image_1","image_2","count","img0","img1","img2","img3","img4","img5","img6","ref","useRef","t","useLoader","TextureLoader","useMemo","map","minFilter","LinearFilter","texture1","dispTexture","useFrame","curDisp","current","material","onClick","attach","args","uniforms-texture-value","uniforms-texture2-value","uniforms-disp-value","Text","header","content","style","fontSize","href","className","App","useState","setCount","mobile","setMobile","handleResize","window","innerWidth","useEffect","addEventListener","removeEventListener","width","height","backgroundColor","top","left","e","bottom","color","Fragment","pixelRatio","camera","position","fallback","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8700e24b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/frog_1.35363a46.png\";","module.exports = __webpack_public_path__ + \"static/media/frog_4.deb1cdff.png\";","module.exports = __webpack_public_path__ + \"static/media/frog_2.eb3f0fc8.png\";","module.exports = __webpack_public_path__ + \"static/media/frog_3.be350f2d.png\";","module.exports = __webpack_public_path__ + \"static/media/frog_5.f05a9a6a.png\";","module.exports = __webpack_public_path__ + \"static/media/frog_0.c139449a.png\";","module.exports = __webpack_public_path__ + \"static/media/frog_6.eb4569cd.png\";","module.exports = __webpack_public_path__ + \"static/media/disp.ac0814dc.jpeg\";","const FadeShader = {\n  uniforms: {\n    effectFactor: { type: \"f\", value: 1.2 },\n    dispFactor: { type: \"f\", value: 0 },\n    texture: { type: \"t\", value: undefined },\n    texture2: { type: \"t\", value: undefined },\n    disp: { type: \"t\", value: undefined }\n  },\n  vertexShader: `\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }\n  `,\n  fragmentShader: `\n    varying vec2 vUv;\n    uniform sampler2D texture;\n    uniform sampler2D texture2;\n    uniform sampler2D disp;\n    uniform float _rot;\n    uniform float dispFactor;\n    uniform float effectFactor;\n\n    void main() {\n      vec2 uv = vUv;\n      vec4 disp = texture2D(disp, uv);\n      vec2 distortedPosition = vec2(uv.x, uv.y + dispFactor * (disp.r*effectFactor));\n      vec2 distortedPosition2 = vec2(uv.x, uv.y - (1.0 - dispFactor) * (disp.r*effectFactor));\n      vec4 _texture = texture2D(texture, distortedPosition);\n      vec4 _texture2 = texture2D(texture2, distortedPosition2);\n      vec4 finalTexture = mix(_texture, _texture2, dispFactor);\n      gl_FragColor = finalTexture;\n    }\n  `\n}\n\nexport { FadeShader }\n","import ReactDOM from 'react-dom'\nimport React, { Suspense, useRef, useState, useMemo, useEffect } from 'react'\nimport { Canvas, useFrame, useLoader } from 'react-three-fiber'\nimport { TextureLoader, LinearFilter } from \"three\"\nimport img0 from './assets/frog_0.png';\nimport img1 from './assets/frog_1.png';\nimport img2 from './assets/frog_2.png';\nimport img3 from './assets/frog_3.png';\nimport img4 from './assets/frog_4.png';\nimport img5 from './assets/frog_5.png';\nimport img6 from './assets/frog_6.png';\nimport disp from './assets/disp.jpeg';\nimport { FadeShader } from './fadeShader';\nimport './App.css';\n\nfunction Box(props) {\n\n  let image_1;\n  let image_2;\n\n  switch (props.count) {\n    case 0:\n      image_1 = img0;\n      image_2 = img1;\n      break;\n    case 1:\n      image_1 = img1;\n      image_2 = img1;\n      break;\n    case 2: \n      image_1 = img2;\n      image_2 = img2;\n      break;\n    case 3: \n      image_1 = img3;\n      image_2 = img3;\n      break;\n    case 4: \n      image_1 = img4;\n      image_2 = img4;\n    case 5: \n      image_1 = img4;\n      image_2 = img5;\n      break;\n    case 6: \n      image_1 = img6;\n      image_2 = img5;\n      break;\n  }\n\n  // This reference will give us direct access to the mesh\n  const ref = useRef()\n  const t = useLoader(TextureLoader, [image_1, image_2, disp])\n  const [texture1, texture2, dispTexture] = useMemo(() => t.map(t => ((t.minFilter = LinearFilter), t)), [t])\n\n  useFrame(() => {\n    const curDisp = ref.current.material.uniforms.dispFactor.value;\n    ref.current.material.uniforms.dispFactor.value += ((props.count % 2 !== 0 ? 1 : 0) - curDisp) * 0.1\n  })\n\n  return (\n    <mesh\n      ref={ref}\n      onClick={props.onClick}>\n      <planeBufferGeometry attach=\"geometry\" args={[15, 10]} />\n      <shaderMaterial\n        attach=\"material\"\n        args={[FadeShader]}\n        uniforms-texture-value={texture1}\n        uniforms-texture2-value={texture2}\n        uniforms-disp-value={dispTexture}\n      />\n    </mesh>\n  )\n}\n\nconst Text = (props) => {\n\n  let header;\n  let content;\n\n   switch (props.count) {\n    case 0:\n      header = <div>Goodbye <br /> frog</div>;\n      content = \"I had the best time at frog. Some might even say it should be illegal to have this much fun at work. I’m truly sad to be moving on, so I made a website to share some of my most favorite memories here.\";\n      break;\n    case 1: \n      header = \"4PM\";\n      content = \"We snack and we do fun things. From presidential fitness challenge where Eva challenged Francois on push-ups, to team Erik vs team Anshul beer pong, to Chinese New year and many more.\";\n      break;\n    case 2: \n      header = <div style={{fontSize: '60px'}}>The impeccable <br />collaboration</div>;\n      content = \"From John&Jon, to the strats solving daring problem at hand, to DT tattooing our president, to Randolph’s hours, to when we all danced together – the team spirit is incomparable.\";\n      break;\n    case 3: \n      header = \"frog FASHUN\";\n      content = \"I’ll miss walking into the studio to find out that 5 other frogs are all dressing the same, granted most of the time it’s just all black outfits.\";\n      break;\n    case 4: \n      header = <div>My<br />Other<br />Pod</div>;\n      content = \"Getting to work closely and learn from Eva is one of the joys in life I am lucky enough to get to experience. She is truly the other pod I didn’t know I was missing. I am so glad to have met her in the pond. \";\n      break;\n    case 5: \n      header = \"TECH TEAM\";\n      content = \"The reason why work has been so incredibly fun and the best team I could ever ask for. We code, we debug, we design, we eat lunch, we stay late, we ship, we make fun of each other. I will truly miss tech team so much.\";\n      break;\n    case 6: \n      header = <div>Thank <br /> you</div>;\n      content = <div>Thank you all for the great memories. I can only put so much on a website. Please stay <a href=\"http://www.wipawe.com/\">in touch.</a> I promise to do you proud and never use bad post-its.</div>\n      break;\n  }\n\n  return (\n    <div className=\"textContainer\">\n    <div className=\"text\">\n      <h1>{header}</h1>\n      <p>{content}</p>\n    </div>\n    </div>\n  )\n}\n\nconst App = () => {\n\n  const [ count, setCount ] = useState(0);\n  const [ mobile, setMobile ] = useState();\n\n  const handleResize = () => {\n    if (window.innerWidth < 768) {\n      setMobile(true);\n    } else {\n      setMobile(false);\n    }\n  }\n\n  useEffect(() => {\n\n      handleResize();\n      window.addEventListener('resize', handleResize);\n\n      return () => {\n        window.removeEventListener('resize', handleResize);\n      }\n  })  \n\n  if ( count > 6) {\n    setCount(0);\n  }\n\n  return (\n    <div style={{ width: '100vw', height: '100vh', backgroundColor: '#1B1B1B'}}>\n    <div className=\"eyebrow\" style={{top: '48px', left: '60px'}}>2020</div>\n    <div className=\"eyebrow\" style={{top: '48px', left: 'calc(50% - 25px'}}>0626</div>\n    { count < 6 && \n      <div\n        onClick={ e => setCount(count+1) }\n        className=\"eyebrow\" style={{bottom: '72px', left: 'calc(50% - 88px)', color: '#4EE702'}}\n      >\n          CLICK TO CONTINUE\n      </div>\n    }\n    { !mobile && \n        <React.Fragment>\n          <Text count={count}/>\n          <Canvas pixelRatio={1} camera={{position: [0, 0, 6.5]}}>\n            <Suspense fallback={null}>\n              <Box onClick={e => setCount(count+1)} count={count}/>\n            </Suspense>\n          </Canvas>\n        </React.Fragment>\n    }\n    { mobile && \n      <p className=\"eyebrow\" style={{ top: '50%', left: '48px'}}>For better experience, view on desktop.</p>\n    }\n    </div>\n  )\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}